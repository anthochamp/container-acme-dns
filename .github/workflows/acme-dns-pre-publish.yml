name: Acme-dns container pre-publish

on:
  workflow_call:
    secrets:
      dhub-username:
        required: true
      dhub-password:
        required: true
    inputs:
      build-context:
        description: Build's context is the set of files located in the specified PATH or URL
        required: false
        type: string
    outputs:
      container-tags:
        value: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          ${{ jobs.acme-dns-pre-publish.outputs.push-only-once-tags }}
          type=raw,priority=700,value=acmesh${{ jobs.acme-dns-pre-publish.outputs.acme-sh-version }}
          type=raw,priority=700,value=acmesh${{ jobs.acme-dns-pre-publish.outputs.acme-sh-version-major }}.${{ jobs.acme-dns-pre-publish.outputs.acme-sh-version-minor }}
          type=raw,priority=700,value=acmesh${{ jobs.acme-dns-pre-publish.outputs.acme-sh-version-major }},enable=${{ jobs.acme-dns-pre-publish.outputs.acme-sh-version-major != '0' }}
          type=raw,priority=100,value=latest
      container-image-name:
        value: ${{ jobs.acme-dns-pre-publish.outputs.container-image-name }}

jobs:
  acme-dns-pre-publish:
    runs-on: ubuntu-latest
    outputs:
      container-image-name: ${{ steps.container-image-name.outputs.VALUE }}
      acme-sh-version: ${{ steps.acme-sh-version.outputs.VERSION }}
      acme-sh-version-major: ${{ steps.acme-sh-version.outputs.MAJOR }}
      acme-sh-version-minor: ${{ steps.acme-sh-version.outputs.MINOR }}
      acme-sh-version-patch: ${{ steps.acme-sh-version.outputs.PATCH }}
      push-only-once-tags: ${{ steps.push-only-once-tags.outputs.VALUE }}
    steps:
      - name: Compose container image name
        id: container-image-name
        run: echo "VALUE=${REPO_NAME#container-}" >>$GITHUB_OUTPUT
        env:
          REPO_NAME: ${{ github.event.repository.name }}

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Find out embedded acme.sh version
        id: acme-sh-version
        run: |
          version=$(scripts/acme-sh-version.sh $BUILD_CONTEXT)
          echo "VERSION=$version" >>$GITHUB_OUTPUT
          versionArray=( ${version//./ } )
          echo "MAJOR=${versionArray[0]}" >>$GITHUB_OUTPUT
          echo "MINOR=${versionArray[1]}" >>$GITHUB_OUTPUT
          echo "PATCH=${versionArray[2]}" >>$GITHUB_OUTPUT
        env:
          BUILD_CONTEXT: ${{ inputs.build-context }}

      - name: Find out latest git tagged version
        id: git-tag-version
        run: |
          lastTag=$(for tag in $(git tag); do git describe --tags --match="$tag" --abbrev=0 2>/dev/null; done | sort -Vr | head -n1)
          version=$(echo "$lastTag" | cut -b2-)
          echo "VERSION=$version" >>$GITHUB_OUTPUT
          versionArray=(${version//./ })
          echo "MAJOR=${versionArray[0]}" >>$GITHUB_OUTPUT
          echo "MINOR=${versionArray[1]}" >>$GITHUB_OUTPUT
          echo "PATCH=${versionArray[2]}" >>$GITHUB_OUTPUT

      - name: Log into Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.dhub-username }}
          password: ${{ secrets.dhub-password }}

      - name: Compose push-only-once container tags
        id: push-only-once-tags
        run: |
          value=
          if [ -n "$GIT_TAG_VERSION" ]; then
            fullVersion="$GIT_TAG_VERSION+acmesh${{ steps.acme-sh-version.outputs.VERSION }}"

            if docker manifest inspect ${{ secrets.dhub-username }}/${{ steps.container-image-name.outputs.VALUE }}:$version >/dev/null 2>/dev/null; then
              value="$fullVersion
          ${{ steps.git-tag-version.outputs.MAJOR }}.${{ steps.git-tag-version.outputs.MINOR }}+acmesh${{ steps.acme-sh-version.outputs.VERSION }}
          type=raw,value=${{ steps.git-tag-version.outputs.MAJOR }}+acmesh${{ steps.acme-sh-version.outputs.VERSION }},enable=${{ steps.git-tag-version.outputs.MAJOR != '0' }}"
            fi
          fi

          echo "VALUE=$value" >>$GITHUB_OUTPUT
        env:
          GIT_TAG_VERSION: ${{ steps.git-tag-version.outputs.VERSION }}
